generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                 Int                  @id @default(autoincrement())
  name               String
  emailAdmin         String
  officePhone        String
  address            String
  users              User[]
  payrollPeriods     PayrollPeriod[]
  AttendanceSchedule AttendanceSchedule[]
}

model User {
  id                  Int                  @id @default(autoincrement())
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           Int
  name                String
  email               String               @unique
  address             String
  role                Role
  contactNumber       String
  passwordHash        String
  employee            Employee?
  paymentTransactions PaymentTransaction[]
}

model Employee {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id])
  userId         Int              @unique
  nik            String           @unique
  status         EmploymentStatus
  position       String
  joinDate       DateTime
  noRekening     String
  isActive       Boolean          @default(true)
  salaries       Salary[]
  payrolls       Payroll[]
  salaryAdvances SalaryAdvance[]
  attendances    Attendance[]
  Notification   Notification[]
}

model Salary {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  baseSalary Float
  allowance  Float
  deduction  Float
  type       String
}

model PayrollPeriod {
  id                  Int                  @id @default(autoincrement())
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           Int
  periodStart         DateTime
  periodEnd           DateTime
  payDate             DateTime
  status              PayrollStatus
  payrolls            Payroll[]
  salaryAdvances      SalaryAdvance[]
  paymentTransactions PaymentTransaction[]
}

model Payroll {
  id              Int                @id @default(autoincrement())
  employee        Employee           @relation(fields: [employeeId], references: [id])
  employeeId      Int
  payrollPeriod   PayrollPeriod      @relation(fields: [payrollPeriodId], references: [id])
  payrollPeriodId Int
  totalSalary     Float
  netSalary       Float
  paidDate        DateTime?
  status          PaymentStatus      @default(UNPAID)
  components      PayrollComponent[]
}

model PayrollComponent {
  id        Int     @id @default(autoincrement())
  payroll   Payroll @relation(fields: [payrollId], references: [id])
  payrollId Int
  name      String
  amount    Float
  type      String
}

model PaymentTransaction {
  id                       String        @id @default(cuid())
  payrollPeriod            PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  payrollPeriodId          Int
  totalAmount              Float
  paymentMethod            String
  status                   TransactionStatus
  paidBy                   User          @relation(fields: [paidById], references: [id])
  paidById                 Int
  xenditPaymentRequestId   String?       @unique
  xenditBatchDisbId       String?       @unique
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
}


model SalaryAdvance {
  id                Int           @id @default(autoincrement())
  employee          Employee      @relation(fields: [employeeId], references: [id])
  employeeId        Int
  payrollPeriod     PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  payrollPeriodId   Int
  requestedAmount   Float
  maxAllowed        Float
  status            AdvanceStatus
  remarks           String?
  paymentStatus     PaymentStatus
  paymentReference  String?
  serviceFee        Float
  finalDisbursement Float
  requestedAt       DateTime
  approvedBy        String?
  approvedAt        DateTime?
  processedBy       String?
  processedAt       DateTime?
}

model AttendanceSchedule {
  id           Int          @id @default(autoincrement())
  company      Company      @relation(fields: [companyId], references: [id])
  companyId    Int
  date         DateTime
  checkInTime  DateTime
  checkOutTime DateTime
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  attendances  Attendance[]
}

model Attendance {
  id               Int                @id @default(autoincrement())
  employee         Employee           @relation(fields: [employeeId], references: [id])
  employeeId       Int
  schedule         AttendanceSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId       Int
  checkInTime      DateTime?
  checkOutTime     DateTime?
  checkInLocation  String?
  checkOutLocation String?
  checkInPhoto     String?
  checkOutPhoto    String?
  status           AttendanceStatus   @default(PENDING)
  remarks          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  absenceRequest   AbsenceRequest?
}

model AbsenceRequest {
  id           Int           @id @default(autoincrement())
  attendance   Attendance    @relation(fields: [attendanceId], references: [id])
  attendanceId Int           @unique
  reason       AbsenceReason
  description  String?
  proofPhoto   String?
  status       RequestStatus @default(PENDING)
  reviewedAt   DateTime?
  reviewedBy   Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Notification {
  id         Int      @id @default(autoincrement())
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  SUPERADMIN
  ADMIN
  HR
  FINANCE
  EMPLOYEE
}

enum EmploymentStatus {
  PERMANENT
  CONTRACT
  OUTSOURCED
}

enum PayrollStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AdvanceStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  UNPAID
  PROCESSING
  PAID
  FAILED
}

enum AttendanceStatus {
  PENDING
  PRESENT
  SICK
  PERMISSION
  ABSENT
}

enum TransactionStatus {
  PENDING
  PAID
  EXPIRED
  FAILED
}

enum AbsenceReason {
  SICK
  PERMISSION
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
